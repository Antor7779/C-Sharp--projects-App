using System;
using System.IO;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace FileExplorerApp
{
    public partial class Form1 : Form
    {
        private ImageList imageList;

        public Form1()
        {
            InitializeComponent();

            // Initialize ImageList
            imageList = new ImageList();
            imageList.ImageSize = new System.Drawing.Size(32, 32); // Set the size of the icons
            listView1.LargeImageList = imageList;

            // Set the ListView to display in Details view
            listView1.View = View.Details;

            // Add columns to the ListView
            listView1.Columns.Add("File Name", 150);
            listView1.Columns.Add("Type", 80);
            listView1.Columns.Add("Size (KB)", 80);

            // Allow the user to rearrange columns
            listView1.AllowColumnReorder = true;

            // Subscribe to the SelectedIndexChanged event for listBox2
            listBox2.SelectedIndexChanged += listBox2_SelectedIndexChanged;

            // Subscribe to drag events for listView1
            listView1.ItemDrag += ListView1_ItemDrag;
            listBox2.DragEnter += ListBox2_DragEnter;
            listBox2.DragDrop += ListBox2_DragDrop;

        }

        private void buttonBrowseFolder_Click(object sender, EventArgs e)
        {
            using (FolderBrowserDialog folderDialog = new FolderBrowserDialog())
            {
                DialogResult result = folderDialog.ShowDialog();

                if (result == DialogResult.OK && !string.IsNullOrWhiteSpace(folderDialog.SelectedPath))
                {
                    // Add the selected folder path to listBox1
                    listBox1.Items.Add(folderDialog.SelectedPath);

                    // Clear previous items in the ListView
                    listView1.Items.Clear();
                    imageList.Images.Clear();

                    // Show all files in the selected path in the ListView
                    ShowFilesInListView(folderDialog.SelectedPath);
                }
            }
        }

        private void ShowFilesInListView(string folderPath)
        {
            try
            {
                // Get all file paths in the selected folder
                string[] files = Directory.GetFiles(folderPath);

                foreach (string file in files)
                {
                    // Get file information
                    FileInfo fileInfo = new FileInfo(file);

                    // Create a ListViewItem with the file name
                    ListViewItem item = new ListViewItem(Path.GetFileName(file));

                    // Add subitems with file type and size
                    item.SubItems.Add(Path.GetExtension(file));
                    item.SubItems.Add((fileInfo.Length / 1024).ToString("N0")); // Size in KB

                    // Get the file icon and add it to the ImageList
                    Icon fileIcon = GetIcon(file, true);
                    imageList.Images.Add(fileIcon.ToBitmap());

                    // Set the image index for the ListViewItem
                    item.ImageIndex = imageList.Images.Count - 1;

                    // Add the ListViewItem to the ListView
                    listView1.Items.Add(item);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"An error occurred: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        [DllImport("shell32.dll", SetLastError = true)]
        private static extern IntPtr SHGetFileInfo(string pszPath, uint dwFileAttributes, ref SHFILEINFO psfi, uint cbSizeFileInfo, uint uFlags);

        [StructLayout(LayoutKind.Sequential)]
        private struct SHFILEINFO
        {
            public IntPtr hIcon;
            public IntPtr iIcon;
            public uint dwAttributes;
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 260)]
            public string szDisplayName;
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 80)]
            public string szTypeName;
        }

        private const uint SHGFI_ICON = 0x100;
        private const uint SHGFI_LARGEICON = 0x0; // Large icon
        private const uint SHGFI_SMALLICON = 0x1; // Small icon

        private Icon GetIcon(string filePath, bool largeIcon)
        {
            SHFILEINFO shinfo = new SHFILEINFO();
            uint flags = SHGFI_ICON | (largeIcon ? SHGFI_LARGEICON : SHGFI_SMALLICON);

            IntPtr result = SHGetFileInfo(filePath, 0, ref shinfo, (uint)Marshal.SizeOf(shinfo), flags);
            if (result != IntPtr.Zero)
            {
                Icon icon = Icon.FromHandle(shinfo.hIcon);
                return icon;
            }
            else
            {
                return null;
            }
        }

        private void buttonSetCustomPath_Click(object sender, EventArgs e)
        {
            using (FolderBrowserDialog folderDialog = new FolderBrowserDialog())
            {
                DialogResult result = folderDialog.ShowDialog();

                if (result == DialogResult.OK && !string.IsNullOrWhiteSpace(folderDialog.SelectedPath))
                {
                    // Set the selected folder path to listBox2
                    listBox2.Tag = folderDialog.SelectedPath;

                    // Clear previous items in listBox2
                    listBox2.Items.Clear();

                    // Show all files in the selected path in listBox2
                    ShowFilesInListBox2(folderDialog.SelectedPath);
                }
            }
        }

        private void ShowFilesInListBox2(string folderPath)
        {
            try
            {
                // Get all file paths in the selected folder
                string[] files = Directory.GetFileSystemEntries(folderPath);
                // PopulateListBox2 lt = new PopulateListBox2;
                //string[] files =Directory.GetFiles(PopulateListBox2);

                foreach (string file in files)
                {
                    // Add the file name to listBox2
                    listBox2.Items.Add(Path.GetFileName(file));
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"An error occurred: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void listBox2_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (listBox2.SelectedItem != null)
            {
                // Get the selected item (file or folder) from listBox2
                string selectedItem = listBox2.SelectedItem.ToString();

                // Get the full path of the selected item in listBox2
                string selectedPath = Path.Combine(listBox2.Tag.ToString(), selectedItem);

                // Display the selected path in the label
                labelFilePath.Text = $"Selected Path: {selectedPath}";
            }
            else
            {
                // If no item is selected, clear the label text
                labelFilePath.Text = "Selected Path: ";
            }
        }

        private void ListView1_ItemDrag(object sender, ItemDragEventArgs e)
        {
            // Start dragging the selected items from listView1
            listView1.DoDragDrop(e.Item, DragDropEffects.Move);
        }

        private void ListBox2_DragEnter(object sender, DragEventArgs e)
        {
            // Check if the dragged data is a valid format
            if (e.Data.GetDataPresent(DataFormats.Text) || e.Data.GetDataPresent(DataFormats.FileDrop))
            {
                e.Effect = DragDropEffects.Copy;
            }
            else
            {
                e.Effect = DragDropEffects.None;
            }
        }

        private void ListBox2_DragDrop(object sender, DragEventArgs e)
        {
            // Handle the drop operation for listBox2
            if (e.Data.GetDataPresent(DataFormats.FileDrop))
            {
                // If the dragged data is a file, copy it to the target directory for listBox2
                string[] files = (string[])e.Data.GetData(DataFormats.FileDrop);

                // Specify the target directory for listBox2
                string targetDirectory2 = @"E:\"; // Change this to your desired directory

                // Create the directory if it doesn't exist
                if (!Directory.Exists(targetDirectory2))
                {
                    Directory.CreateDirectory(targetDirectory2);
                }

                // Iterate through each file and copy it to listBox2
                foreach (string file in files)
                {
                    // Copy the file to the target directory for listBox2
                    string destinationPath2 = Path.Combine(targetDirectory2, Path.GetFileName(file));
                    File.Copy(file, destinationPath2);

                    // Add the copied file name to listBox2
                    listBox2.Items.Add(Path.GetFileName(destinationPath2));
                }
            }
        }


        private void labelFilePath_Click(object sender, EventArgs e)
        {

        }

        

        private void buttonCopy_Click(object sender, EventArgs e)
        {
            // Check if any items are selected in listView1
            if (listView1.SelectedItems.Count > 0)
            {
                // Specify the target directory for listBox2
                string targetDirectory2 = listBox2.Tag.ToString(); // Use the path from listBox2.Tag

                // Create the directory if it doesn't exist
                if (!Directory.Exists(targetDirectory2))
                {
                    Directory.CreateDirectory(targetDirectory2);
                }

                // Iterate through each selected item in listView1 and copy it to listBox2
                foreach (ListViewItem selectedItem in listView1.SelectedItems)
                {
                    // Get the file name from the selected item in listView1
                    string fileName = selectedItem.Text;

                    // Get the source and destination paths
                    string sourcePath = Path.Combine(listBox1.Items[0].ToString(), fileName);
                    string destinationPath2 = Path.Combine(targetDirectory2, fileName);

                    // Copy the file to the target directory for listBox2
                    File.Copy(sourcePath, destinationPath2);

                    // Add the copied file name to listBox2
                    listBox2.Items.Add(fileName);
                }
            }
        }

       

    }
}
